{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar withIs = require('class-is');\n\nvar addNamedLink = require('./addNamedLink');\n\nvar visibility = require('../visibility');\n\nclass DAGNode {\n  constructor(data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size');\n    }\n\n    this._data = data || Buffer.alloc(0);\n    this._links = links;\n    this._serializedSize = serializedSize; // Make sure we have a nice public API that can be used by an IPLD resolver\n\n    visibility.hidePrivateFields(this);\n    visibility.addEnumerableGetters(this, ['Data', 'Links']); // Add getters for existing links by the name of the link\n    // This is how paths are traversed in IPFS. Links with names won't\n    // override existing fields like `data` or `links`.\n\n    links.forEach((link, position) => {\n      addNamedLink(this, link.Name, position);\n    });\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return \"DAGNode <data: \\\"\".concat(this.Data.toString('base64'), \"\\\", links: \").concat(this.Links.length, \", size: \").concat(this.size, \">\");\n  }\n\n  get size() {\n    if (this._size === undefined) {\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  } // Getters for backwards compatible path resolving\n\n\n  get Data() {\n    return this._data;\n  }\n\n  set Data(_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\");\n  }\n\n  get Links() {\n    return this._links.map(link => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      };\n    });\n  }\n\n  set Links(_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":{"version":3,"sources":["/workspace/dtube/node_modules/ipld-dag-pb/src/dag-node/index.js"],"names":["assert","require","withIs","addNamedLink","visibility","DAGNode","constructor","data","links","serializedSize","_data","Buffer","alloc","_links","_serializedSize","hidePrivateFields","addEnumerableGetters","forEach","link","position","Name","toJSON","_json","Object","freeze","Data","map","l","size","assign","toString","Links","length","_size","undefined","reduce","sum","Tsize","Error","_","Hash","exports","module","className","symbolName","create","clone","addLink","rmLink"],"mappings":"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","sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst addNamedLink = require('./addNamedLink')\nconst visibility = require('../visibility')\n\nclass DAGNode {\n  constructor (data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size')\n    }\n\n    this._data = data || Buffer.alloc(0)\n    this._links = links\n    this._serializedSize = serializedSize\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Data', 'Links'])\n\n    // Add getters for existing links by the name of the link\n    // This is how paths are traversed in IPFS. Links with names won't\n    // override existing fields like `data` or `links`.\n    links.forEach((link, position) => {\n      addNamedLink(this, link.Name, position)\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  // Getters for backwards compatible path resolving\n  get Data () {\n    return this._data\n  }\n  set Data (_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\")\n  }\n  get Links () {\n    return this._links.map((link) => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      }\n    })\n  }\n  set Links (_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n"]},"metadata":{},"sourceType":"script"}