{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/dtube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/dtube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/workspace/dtube/src/components/App.js\";\nimport React, { Component } from 'react';\nimport DTube from '../abis/DTube.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Footer from './Footer';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, dtube, videosCount, i, video, latest;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; // Load account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              _this2.setState({\n                account: accounts[0]\n              }); // Network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              networkData = DTube.networks[networkId];\n\n              if (!networkData) {\n                _context3.next = 32;\n                break;\n              }\n\n              dtube = new web3.eth.Contract(DTube.abi, networkData.address);\n\n              _this2.setState({\n                dtube\n              });\n\n              _context3.next = 14;\n              return dtube.methods.videoCount().call();\n\n            case 14:\n              videosCount = _context3.sent;\n\n              _this2.setState({\n                videosCount\n              }); // Load videos, sort by newest\n\n\n              i = videosCount;\n\n            case 17:\n              if (!(i >= 1)) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 20;\n              return dtube.methods.videos(i).call();\n\n            case 20:\n              video = _context3.sent;\n\n              _this2.setState({\n                videos: [..._this2.state.videos, video]\n              });\n\n            case 22:\n              i--;\n              _context3.next = 17;\n              break;\n\n            case 25:\n              _context3.next = 27;\n              return dtube.methods.videos(videosCount).call();\n\n            case 27:\n              latest = _context3.sent;\n\n              _this2.setState({\n                currentHash: latest.hash,\n                currentTitle: latest.title\n              });\n\n              _this2.setState({\n                loading: false\n              });\n\n              _context3.next = 33;\n              break;\n\n            case 32:\n              window.alert('DTube contract not deployed to detected network.');\n\n            case 33:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadVideo = title => {\n      console.log(\"Submitting file to IPFS...\"); //adding file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('IPFS result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n        this.state.dtube.methods.uploadVideo(result[0].hash, title).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.changeVideo = (hash, title) => {\n      this.setState({\n        'currentHash': hash\n      });\n      this.setState({\n        'currentTitle': title\n      });\n    };\n\n    this.state = {\n      buffer: null,\n      account: '',\n      dtube: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null\n    };\n    this.uploadVideo = this.uploadVideo.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n    this.changeVideo = this.changeVideo.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 59\n      }\n    }, \"...\")) : /*#__PURE__*/React.createElement(Main, {\n      videos: this.state.videos,\n      uploadVideo: this.uploadVideo,\n      captureFile: this.captureFile,\n      changeVideo: this.changeVideo,\n      currentHash: this.state.currentHash,\n      currentTitle: this.state.currentTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/workspace/dtube/src/components/App.js"],"names":["React","Component","DTube","Navbar","Main","Footer","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","dtube","Contract","abi","address","methods","videoCount","call","videosCount","i","videos","video","state","latest","currentHash","hash","currentTitle","title","loading","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadVideo","add","error","send","from","on","changeVideo","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DTube from '../abis/DTube.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Footer from './Footer'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = DTube.networks[networkId]\n    if(networkData) {\n      const dtube = new web3.eth.Contract(DTube.abi, networkData.address)\n      this.setState({ dtube })\n      const videosCount = await dtube.methods.videoCount().call()\n      this.setState({ videosCount })\n      // Load videos, sort by newest\n      for (var i=videosCount; i>=1; i--) {\n        const video = await dtube.methods.videos(i).call()\n        this.setState({\n          videos: [...this.state.videos, video]\n        })\n      }\n      //Set latest video with title to view as default \n      const latest = await dtube.methods.videos(videosCount).call()\n      this.setState({\n        currentHash: latest.hash,\n        currentTitle: latest.title\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('DTube contract not deployed to detected network.')\n    }\n  }\n\n  captureFile = event => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n\n  uploadVideo = title => {\n    console.log(\"Submitting file to IPFS...\")\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('IPFS result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      this.state.dtube.methods.uploadVideo(result[0].hash, title).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  changeVideo = (hash, title) => {\n    this.setState({'currentHash': hash});\n    this.setState({'currentTitle': title});\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      buffer: null,\n      account: '',\n      dtube: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null\n    }\n\n    this.uploadVideo = this.uploadVideo.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n    this.changeVideo = this.changeVideo.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>...</p></div>\n          : <Main\n              videos={this.state.videos}\n              uploadVideo={this.uploadVideo}\n              captureFile={this.captureFile}\n              changeVideo={this.changeVideo}\n              currentHash={this.state.currentHash}\n              currentTitle={this.state.currentTitle}\n            />\n        }\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}