{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar assert = require('assert');\n\nvar withIs = require('class-is');\n\nvar visibility = require('../visibility'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, cid) {\n    assert(cid, 'A link requires a cid to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._nameBuf = null;\n    this._size = size;\n    this._cid = new CID(cid); // Make sure we have a nice public API that can be used by an IPLD resolver\n\n    visibility.hidePrivateFields(this);\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize']);\n  }\n\n  toString() {\n    return \"DAGLink <\".concat(this._cid.toBaseEncodedString(), \" - name: \\\"\").concat(this.Name, \"\\\", size: \").concat(this.Tsize, \">\");\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  get Name() {\n    return this._name;\n  } // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n\n\n  get nameAsBuffer() {\n    if (this._nameBuf !== null) {\n      return this._nameBuf;\n    }\n\n    this._nameBuf = Buffer.from(this._name);\n    return this._nameBuf;\n  }\n\n  set Name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get Tsize() {\n    return this._size;\n  }\n\n  set Tsize(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get Hash() {\n    return this._cid;\n  }\n\n  set Hash(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.util = require('./util');","map":{"version":3,"sources":["/workspace/dtube/node_modules/ipld-dag-pb/src/dag-link/index.js"],"names":["CID","require","assert","withIs","visibility","DAGLink","constructor","name","size","cid","_name","_nameBuf","_size","_cid","hidePrivateFields","addEnumerableGetters","toString","toBaseEncodedString","Name","Tsize","toJSON","_json","Object","freeze","Hash","assign","nameAsBuffer","Buffer","from","Error","exports","module","className","symbolName","util"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,eAAD,CAA1B,C,CAEA;;;AACA,MAAMI,OAAN,CAAc;AACZC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,GAAd,EAAmB;AAC5BP,IAAAA,MAAM,CAACO,GAAD,EAAM,mCAAN,CAAN,CAD4B,CAE5B;AACA;AACA;;AAEA,SAAKC,KAAL,GAAaH,IAAI,IAAI,EAArB;AACA,SAAKI,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAaJ,IAAb;AACA,SAAKK,IAAL,GAAY,IAAIb,GAAJ,CAAQS,GAAR,CAAZ,CAT4B,CAW5B;;AACAL,IAAAA,UAAU,CAACU,iBAAX,CAA6B,IAA7B;AACAV,IAAAA,UAAU,CAACW,oBAAX,CAAgC,IAAhC,EAAsC,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAAtC;AACD;;AAEDC,EAAAA,QAAQ,GAAI;AACV,8BAAmB,KAAKH,IAAL,CAAUI,mBAAV,EAAnB,wBAA+D,KAAKC,IAApE,uBAAoF,KAAKC,KAAzF;AACD;;AAEDC,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBhB,QAAAA,IAAI,EAAE,KAAKW,IADc;AAEzBV,QAAAA,IAAI,EAAE,KAAKW,KAFc;AAGzBV,QAAAA,GAAG,EAAE,KAAKe,IAAL,CAAUP,mBAAV;AAHoB,OAAd,CAAb;AAKD;;AAED,WAAOK,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkB,KAAKJ,KAAvB,CAAP;AACD;;AAED,MAAIH,IAAJ,GAAY;AACV,WAAO,KAAKR,KAAZ;AACD,GAnCW,CAqCZ;AACA;AACA;;;AACA,MAAIgB,YAAJ,GAAoB;AAClB,QAAI,KAAKf,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,aAAO,KAAKA,QAAZ;AACD;;AAED,SAAKA,QAAL,GAAgBgB,MAAM,CAACC,IAAP,CAAY,KAAKlB,KAAjB,CAAhB;AACA,WAAO,KAAKC,QAAZ;AACD;;AAED,MAAIO,IAAJ,CAAUX,IAAV,EAAgB;AACd,UAAM,IAAIsB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIV,KAAJ,GAAa;AACX,WAAO,KAAKP,KAAZ;AACD;;AAED,MAAIO,KAAJ,CAAWX,IAAX,EAAiB;AACf,UAAM,IAAIqB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIL,IAAJ,GAAY;AACV,WAAO,KAAKX,IAAZ;AACD;;AAED,MAAIW,IAAJ,CAAUf,GAAV,EAAe;AACb,UAAM,IAAIoB,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAnEW;;AAsEdC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB3B,MAAM,CAACE,OAAD,EAAU;AAAE2B,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC;AACAH,OAAO,CAACI,IAAR,GAAejC,OAAO,CAAC,QAAD,CAAtB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst visibility = require('../visibility')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    assert(cid, 'A link requires a cid to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize'])\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get Name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set Name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get Tsize () {\n    return this._size\n  }\n\n  set Tsize (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get Hash () {\n    return this._cid\n  }\n\n  set Hash (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.util = require('./util')\n"]},"metadata":{},"sourceType":"script"}