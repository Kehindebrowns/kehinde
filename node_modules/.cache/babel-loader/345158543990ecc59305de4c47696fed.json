{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar Decoder = require('./decoder');\n\nvar utils = require('./utils');\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\n\n\nclass Diagnose extends Decoder {\n  createTag(tagNumber, value) {\n    return \"\".concat(tagNumber, \"(\").concat(value, \")\");\n  }\n\n  createInt(val) {\n    return super.createInt(val).toString();\n  }\n\n  createInt32(f, g) {\n    return super.createInt32(f, g).toString();\n  }\n\n  createInt64(f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString();\n  }\n\n  createInt32Neg(f, g) {\n    return super.createInt32Neg(f, g).toString();\n  }\n\n  createInt64Neg(f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString();\n  }\n\n  createTrue() {\n    return 'true';\n  }\n\n  createFalse() {\n    return 'false';\n  }\n\n  createFloat(val) {\n    var fl = super.createFloat(val);\n\n    if (utils.isNegativeZero(val)) {\n      return '-0_1';\n    }\n\n    return \"\".concat(fl, \"_1\");\n  }\n\n  createFloatSingle(a, b, c, d) {\n    var fl = super.createFloatSingle(a, b, c, d);\n    return \"\".concat(fl, \"_2\");\n  }\n\n  createFloatDouble(a, b, c, d, e, f, g, h) {\n    var fl = super.createFloatDouble(a, b, c, d, e, f, g, h);\n    return \"\".concat(fl, \"_3\");\n  }\n\n  createByteString(raw, len) {\n    var val = raw.join(', ');\n\n    if (len === -1) {\n      return \"(_ \".concat(val, \")\");\n    }\n\n    return \"h'\".concat(val);\n  }\n\n  createByteStringFromHeap(start, end) {\n    var val = Buffer.from(super.createByteStringFromHeap(start, end)).toString('hex');\n    return \"h'\".concat(val, \"'\");\n  }\n\n  createInfinity() {\n    return 'Infinity_1';\n  }\n\n  createInfinityNeg() {\n    return '-Infinity_1';\n  }\n\n  createNaN() {\n    return 'NaN_1';\n  }\n\n  createNaNNeg() {\n    return '-NaN_1';\n  }\n\n  createNull() {\n    return 'null';\n  }\n\n  createUndefined() {\n    return 'undefined';\n  }\n\n  createSimpleUnassigned(val) {\n    return \"simple(\".concat(val, \")\");\n  }\n\n  createArray(arr, len) {\n    var val = super.createArray(arr, len);\n\n    if (len === -1) {\n      // indefinite\n      return \"[_ \".concat(val.join(', '), \"]\");\n    }\n\n    return \"[\".concat(val.join(', '), \"]\");\n  }\n\n  createMap(map, len) {\n    var val = super.createMap(map);\n    var list = Array.from(val.keys()).reduce(collectObject(val), '');\n\n    if (len === -1) {\n      return \"{_ \".concat(list, \"}\");\n    }\n\n    return \"{\".concat(list, \"}\");\n  }\n\n  createObject(obj, len) {\n    var val = super.createObject(obj);\n    var map = Object.keys(val).reduce(collectObject(val), '');\n\n    if (len === -1) {\n      return \"{_ \".concat(map, \"}\");\n    }\n\n    return \"{\".concat(map, \"}\");\n  }\n\n  createUtf8String(raw, len) {\n    var val = raw.join(', ');\n\n    if (len === -1) {\n      return \"(_ \".concat(val, \")\");\n    }\n\n    return \"\\\"\".concat(val, \"\\\"\");\n  }\n\n  createUtf8StringFromHeap(start, end) {\n    var val = Buffer.from(super.createUtf8StringFromHeap(start, end)).toString('utf8');\n    return \"\\\"\".concat(val, \"\\\"\");\n  }\n\n  static diagnose(input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex');\n    }\n\n    var dec = new Diagnose();\n    return dec.decodeFirst(input);\n  }\n\n}\n\nmodule.exports = Diagnose;\n\nfunction collectObject(val) {\n  return (acc, key) => {\n    if (acc) {\n      return \"\".concat(acc, \", \").concat(key, \": \").concat(val[key]);\n    }\n\n    return \"\".concat(key, \": \").concat(val[key]);\n  };\n}","map":{"version":3,"sources":["/workspace/dtube/node_modules/borc/src/diagnose.js"],"names":["require","Buffer","Decoder","utils","Diagnose","createTag","tagNumber","value","createInt","val","toString","createInt32","f","g","createInt64","f1","f2","g1","g2","createInt32Neg","createInt64Neg","createTrue","createFalse","createFloat","fl","isNegativeZero","createFloatSingle","a","b","c","d","createFloatDouble","e","h","createByteString","raw","len","join","createByteStringFromHeap","start","end","from","createInfinity","createInfinityNeg","createNaN","createNaNNeg","createNull","createUndefined","createSimpleUnassigned","createArray","arr","createMap","map","list","Array","keys","reduce","collectObject","createObject","obj","Object","createUtf8String","createUtf8StringFromHeap","diagnose","input","enc","dec","decodeFirst","module","exports","acc","key"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n"]},"metadata":{},"sourceType":"script"}